import os
import csv
import re
import streamlit as st
from pycaret.classification import setup, compare_models, pull, save_model
import numpy as np
import pandas as pd
from pandas_profiling import ProfileReport
import io
from datetime import datetime, timedelta
import xml.etree.ElementTree as ET

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(layout="wide", page_title="RailGuard", page_icon="üöÇ")

# –ó–∞–≥—Ä—É–∑–∫–∞ CSS –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ç–∏–ª—è
def load_css(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CSS –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    with open(file_path) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

css_file = 'style.css'
load_css(css_file)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
with st.sidebar:
    st.title("üöÇ RailGuard")
    choice = st.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["–ó–∞–≥—Ä—É–∑–∫–∞", "–ê–Ω–∞–ª–∏–∑", "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ü—Ä–æ–≥–Ω–æ–∑—ã", "–≠–∫—Å–ø–æ—Ä—Ç"])
    st.info("ü§ñ –ü—Ä–æ–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Ç–æ–∫–∞")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
st.markdown("<h1 style='color: #d51d29;'>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RailGuard! üöÜ</h1>", unsafe_allow_html=True)
st.markdown("üëã –ú—ã —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
if os.path.exists('./dataset.csv'):
    df = pd.read_csv('dataset.csv', index_col=None)

if choice == "–ó–∞–≥—Ä—É–∑–∫–∞":
    st.title("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤)", type=["csv", "xlsx", "xls"], accept_multiple_files=True)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    def read_file(uploaded_file):
        try:
            if uploaded_file.name.endswith('.csv'):
                return pd.read_csv(uploaded_file, sep=',', index_col=None)
            else:
                return pd.read_excel(uploaded_file, index_col=None)
        except pd.errors.EmptyDataError:
            st.error("üö® –§–∞–π–ª –ø—É—Å—Ç–æ–π")
        except Exception as e:
            st.error(f"üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {uploaded_file.name}: {e}")
        return None

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤
    dataframes = []

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    if files:
        for file in files:
            df = read_file(file)
            if df is not None:
                dataframes.append(df)
                st.success(f"–§–∞–π–ª {file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤ –ø–æ —Å—Ç–æ–ª–±—Ü—É 'ID'
        if dataframes:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ 'ID' –≤ –∫–∞–∂–¥–æ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ
                if all('ID' in df.columns for df in dataframes):
                    combined_df = dataframes[0]
                    for additional_df in dataframes[1:]:
                        combined_df = pd.merge(combined_df, additional_df, how='left', on='ID')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                    combined_file_name = 'combined_dataset.csv'
                    combined_df.to_csv(combined_file_name, index=None)
                    
                    st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –ø–æ 'ID' –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: combined_dataset.csv")

                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª",
                        data=combined_df.to_csv(index=False).encode('utf-8'),
                        file_name='combined_dataset.csv',
                        mime='text/csv'
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    st.session_state.combined_df = combined_df
                else:
                    st.error("üö® –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ 'ID'.")

            except Exception as e:
                st.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                
# –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
if choice == "–ê–Ω–∞–ª–∏–∑":
    st.title("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    if 'combined_df' in st.session_state:
        df = st.session_state.combined_df  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        st.markdown("### –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ—Ç—Ç–æ–∫–∞")
        st.write("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤–ª–∏—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.")
        profile = ProfileReport(df, minimal=True)
        st.components.v1.html(profile.to_html(), height=1000, scrolling=True)
    else:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

if choice == "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
    st.title("ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–æ—Å—Ç—É–ø–µ–Ω
    if 'combined_df' in st.session_state:
        df = st.session_state.combined_df
    else:
        st.error("üö® –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        st.stop()
    
    # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    prediction_interval = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", ["1 –º–µ—Å—è—Ü", "3 –º–µ—Å—è—Ü–∞", "6 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥"])
    
    # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    chosen_targets = st.multiselect('üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã', df.columns)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    if st.button('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ'):
        for target in chosen_targets:
            st.subheader(f"üîç –ú–æ–¥–µ–ª—å –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞: {target}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ —Ü–µ–ª–µ–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
            df_target = df.dropna(subset=[target])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ–∏—á–∏
            X = df_target.drop(columns=[target, 'ID', '–û–ö–ü–û', '–ø—Ä–∏—á–∏–Ω–∞_–æ—Ç—Ç–æ–∫–∞'])  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ —Å—Ç–æ–ª–±—Ü—ã –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
            y = df_target[target]
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏
            setup(X, target=y, verbose=False)
            setup_df = pull()
            st.info("üõ†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ML")
            st.dataframe(setup_df.dropna())
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            best_model = compare_models()
            compare_df = pull()
            st.info("üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å")
            st.dataframe(compare_df.dropna())

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            save_model(best_model, f'best_model_{target}')
            st.success(f"–ú–æ–¥–µ–ª—å –¥–ª—è {target} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞
            predictions = best_model.predict_proba(X)[:, 1]  # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞
            df_target['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞'] = predictions
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results = df_target[['ID', '–û–ö–ü–û', '–ø—Ä–∏—á–∏–Ω–∞_–æ—Ç—Ç–æ–∫–∞', '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞']]
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç—Ç–æ–∫–∞")
            st.dataframe(results)

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
if choice == "–ü—Ä–æ–≥–Ω–æ–∑—ã":
    st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
    selected_region = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", df['Region'].unique())
    st.write(f"–û—Ç—á–µ—Ç –ø–æ –æ—Ç—Ç–æ–∫—É –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {selected_region} –Ω–∞ {prediction_interval}")
    st.line_chart(df[df['Region'] == selected_region][['Date', 'Churn_Probability']])

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV –∏ XML
if choice == "–≠–∫—Å–ø–æ—Ä—Ç":
    st.title("‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
    csv_data = df.to_csv(index=False)
    st.download_button(label="üìÇ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV", data=csv_data, file_name="export_data.csv", mime="text/csv")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ XML
    def to_xml(df):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ XML –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ 1–°."""
        root = ET.Element("Data")
        for _, row in df.iterrows():
            entry = ET.SubElement(root, "Entry")
            for col_name, col_value in row.items():
                col_element = ET.SubElement(entry, col_name)
                col_element.text = str(col_value)
        return ET.tostring(root, encoding="utf-8")

    xml_data = to_xml(df)
    st.download_button(label="üìÇ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XML", data=xml_data, file_name="export_data.xml", mime="application/xml")

    st.info("–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ 1–° –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏ XML.")
